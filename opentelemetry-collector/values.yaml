# Valid values are "daemonset", "deployment", and "statefulset".
mode: "deployment"

configMap:
  # Specifies whether a configMap should be created (true by default)
  create: true

# Base collector configuration.
# Supports templating. To escape existing instances of {{ }}, use {{` <original content> `}}.
# For example, {{ REDACTED_EMAIL }} becomes {{` {{ REDACTED_EMAIL }} `}}.
config:
  exporters:
    otlp:
      endpoint: tempo:4317
      tls:
        insecure: true
    debug:
      verbosity: detailed
    loki:
      endpoint: http://loki:3100/loki/api/v1/push
      tls:
        insecure: true
        # TODO
#    prometheus:
#      endpoint: 0.0.0.0:8889
#      send_timestamps: true
#      metric_expiration: 180m
#      resource_to_telemetry_conversion:
#        enabled: true
    prometheusremotewrite:
      endpoint: http://prometheus-prometheus.monitoring:9090/api/v1/push
      send_timestamps: true
      wal: # Enabling the Write-Ahead-Log for the exporter.
        directory: ./prom_rw # The directory to store the WAL in
        buffer_size: 100 # Optional count of elements to be read from the WAL before truncating; default of 300
        truncate_frequency: 45s
      resource_to_telemetry_conversion:
        enabled: true
  extensions:
    # The health_check extension is mandatory for this chart.
    # Without the health_check extension the collector will fail the readiness and liveliness probes.
    # The health_check extension can be modified, but should never be removed.
    health_check:
      endpoint: 0.0.0.0:13133
  processors:
    batch: {}
    # If set to null, will be overridden with values based on k8s resource limits
    memory_limiter: null
  receivers:
    otlp:
      protocols:
        grpc:
          endpoint: 0.0.0.0:4317
        http:
          endpoint: 0.0.0.0:4318
  service:
    telemetry:
      logs:
        level: "debug"
    extensions:
      - health_check
      - memory_ballast
    pipelines:
      logs:
        exporters:
          - loki
          - debug
        processors:
          - memory_limiter
          - batch
        receivers:
          - otlp
      metrics:
        exporters:
          - prometheusremotewrite
        processors:
          - memory_limiter
          - batch
        receivers:
          - otlp
      traces:
        exporters:
          - otlp
        processors:
          - memory_limiter
          - batch
        receivers:
          - otlp

# Configuration for ports
# nodePort is also allowed
ports:
  otlp:
    enabled: true
    containerPort: 4317
    servicePort: 4317
    hostPort: 4317
    protocol: TCP
    # nodePort: 30317
    appProtocol: grpc
  otlp-http:
    enabled: true
    containerPort: 4318
    servicePort: 4318
    hostPort: 4318
    protocol: TCP
  jaeger-compact:
    enabled: false
  jaeger-thrift:
    enabled: false
  jaeger-grpc:
    enabled: false
  zipkin:
    enabled: false
  metrics:
    # The metrics port is disabled by default. However you need to enable the port
    # in order to use the ServiceMonitor (serviceMonitor.enabled) or PodMonitor (podMonitor.enabled).
    enabled: false
    containerPort: 8888
    servicePort: 8888
    protocol: TCP

# Resource limits & requests. Update according to your own use case as these values might be too low for a typical deployment.
resources: {}
# resources:
#   limits:
#     cpu: 250m
#     memory: 512Mi
