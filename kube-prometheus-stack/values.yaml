kube-prometheus-stack:
  fullnameOverride: prometheus

  defaultRules:
    create: true
    rules:
      alertmanager: true
      etcd: true
      configReloaders: true
      general: true
      k8sContainerCpuUsageSecondsTotal: true
      k8sContainerMemoryCache: true
      k8sContainerMemoryRss: true
      k8sContainerMemorySwap: true
      k8sContainerResource: true
      kubeApiserverAvailability: true
      kubeApiserverBurnrate: true
      kubeApiserverHistogram: true
      kubeApiserverSlos: true
      kubelet: true
      kubeProxy: true
      kubePrometheusGeneral: true
      kubePrometheusNodeRecording: true
      kubernetesApps: true
      kubernetesResources: true
      kubernetesStorage: true
      kubernetesSystem: true
      kubeSchedulerAlerting: true
      kubeSchedulerRecording: true
      kubeStateMetrics: true
      network: true
      node: true
      nodeExporterAlerting: true
      nodeExporterRecording: true
      prometheus: true
      prometheusOperator: true

  alertmanager:
    fullnameOverride: alertmanager

  grafana:
    enabled: true
    fullnameOverride: grafana
    admin:
      existingSecret: grafana-admin-credentials
      userKey: admin-user-grafana
      passwordKey: admin-password-grafana
#    persistence:
#      enabled: true
#      storageClassName: "manual"
#      accessModes:
#         - ReadWriteOnce
#      size: 3Gi
#      volumeName: grafana-pv-volume
    ## Configure additional grafana datasources (passed through tpl)
    ## ref: http://docs.grafana.org/administration/provisioning/#datasources
    additionalDataSources:
      - name: Tempo
        type: tempo
        uid: tempo
        url: http://tempo.monitoring:3100/
        basicAuth: false
        access: proxy
        jsonData:
          tracesToLogsV2:
            datasourceUid: 'loki'
            spanStartTimeShift: '1h'
            spanEndTimeShift: '-1h'
            tags: [{key: 'service.name', value: 'job'}]
            filterByTraceID: true
            filterBySpanID: true
            customQuery: false
          httpMethod: GET
          serviceMap:
            datasourceUid: 'prometheus'
          nodeGraph:
            enabled: true
      - name: Loki
        type: loki
        uid: loki
        url: http://loki.monitoring:3100/
        basicAuth: false
        access: proxy
        jsonData:
          timeout: 60
          maxLines: 1000

  kubeControllerManager:
    enabled: true
    endpoints: # ips of servers
      - 10.255.0.101

  kubeDns:
    enabled: false

  kubeEtcd:
    enabled: true
    endpoints: # ips of servers
      - 10.255.0.101
    service:
      enabled: true
      port: 2381
      targetPort: 2381

  kubeScheduler:
    enabled: true
    endpoints: # ips of servers
      - 10.255.0.101

  kubeProxy:
    enabled: true
    endpoints: # ips of servers
      - 10.255.0.101

  kube-state-metrics:
    fullnameOverride: kube-state-metrics
    selfMonitor:
      enabled: true
    prometheus:
      monitor:
        enabled: true
        relabelings:
          - action: replace
            regex: (.*)
            replacement: $1
            sourceLabels:
              - __meta_kubernetes_pod_node_name
            targetLabel: kubernetes_node

  nodeExporter:
    enabled: true
    serviceMonitor:
      relabelings:
        - action: replace
          regex: (.*)
          replacement: $1
          sourceLabels:
            - __meta_kubernetes_pod_node_name
          targetLabel: kubernetes_node

  prometheus-node-exporter:
    fullnameOverride: node-exporter
    podLabels:
      jobLabel: node-exporter
    extraArgs:
      - --collector.filesystem.mount-points-exclude=^/(dev|proc|sys|var/lib/docker/.+|var/lib/kubelet/.+)($|/)
      - --collector.filesystem.fs-types-exclude=^(autofs|binfmt_misc|bpf|cgroup2?|configfs|debugfs|devpts|devtmpfs|fusectl|hugetlbfs|iso9660|mqueue|nsfs|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|selinuxfs|squashfs|sysfs|tracefs)$
    service:
      portName: http-metrics
    prometheus:
      monitor:
        enabled: true
        relabelings:
          - action: replace
            regex: (.*)
            replacement: $1
            sourceLabels:
              - __meta_kubernetes_pod_node_name
            targetLabel: kubernetes_node
    resources:
      requests:
        memory: 512Mi
        cpu: 250m
      limits:
        memory: 1024Mi

  prometheusOperator:
    enabled: true
    prometheusConfigReloader:
      resources:
        requests:
          cpu: 200m
          memory: 50Mi
        limits:
          memory: 100Mi

  prometheus:
    enabled: true
    prometheusSpec:
      replicas: 1
      replicaExternalLabelName: "replica"
      ruleSelectorNilUsesHelmValues: false
      serviceMonitorSelectorNilUsesHelmValues: false
      podMonitorSelectorNilUsesHelmValues: false
      probeSelectorNilUsesHelmValues: false
      enableRemoteWriteReceiver: true
      retention: 96h
      enableAdminAPI: true
      walCompression: true
      storageSpec:
        volumeClaimTemplate:
          spec:
            storageClassName: hcloud-volumes
            accessModes:
              - ReadWriteOnce
            resources:
              requests:
                storage: 10Gi

  thanosRuler:
    enabled: false
